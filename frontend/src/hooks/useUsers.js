// hooks/useUsers.js
import { useState, useEffect } from 'react';
import { usersAPI } from '../services/api';

export const useUsers = () => {
  const [users, setUsers] = useState([]);
  const [topBuyers, setTopBuyers] = useState([]);
  const [statistics, setStatistics] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadAllData = async () => {
    setLoading(true);
    setError('');
    
    try {
      const [usersResponse, topBuyersResponse, statisticsResponse] = await Promise.all([
        usersAPI.getAll(),
        usersAPI.getTopBuyers({ limit: 5 }),
        usersAPI.getStatistics()
      ]);

      setUsers(usersResponse.data.users || []);
      setTopBuyers(topBuyersResponse.data.topBuyers || []);
      setStatistics(statisticsResponse.data.statistics || {});
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    } finally {
      setLoading(false);
    }
  };

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const loadUsers = async () => {
    try {
      const response = await usersAPI.getAll();
      setUsers(response.data.users || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  };

  // üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const changeUserRole = async (userId, newRole) => {
    try {
      await usersAPI.changeRole(userId, newRole);
      
      setUsers(users.map(user => 
        user.id === userId ? { ...user, role: newRole } : user
      ));
      
      return { success: true, message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }
  };

  // üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const toggleUserStatus = async (userId) => {
    const user = users.find(u => u.id === userId);
    const newStatus = !user.isActive;

    try {
      await usersAPI.toggleStatus(userId, newStatus);
      
      setUsers(users.map(user => 
        user.id === userId ? { ...user, isActive: newStatus } : user
      ));
      
      return { 
        success: true, 
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newStatus ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}` 
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }
  };

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const deleteUser = async (userId) => {
    try {
      await usersAPI.delete(userId);
      
      setUsers(users.filter(user => user.id !== userId));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await loadAllData();
      
      return { success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      return { success: false, message: errorMessage };
    }
  };

  // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const createUser = async (userData) => {
    try {
      const response = await usersAPI.create(userData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
      setUsers([...users, response.data.user]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await loadAllData();
      
      return { success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', user: response.data.user };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      return { success: false, message: errorMessage };
    }
  };

  // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUser = async (userId, userData) => {
    try {
      const response = await usersAPI.update(userId, userData);
      
      setUsers(users.map(user => 
        user.id === userId ? response.data.user : user
      ));
      
      return { success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', user: response.data.user };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      return { success: false, message: errorMessage };
    }
  };

  // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
  const loadTopBuyers = async (params = {}) => {
    try {
      const response = await usersAPI.getTopBuyers(params);
      setTopBuyers(response.data.topBuyers || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π');
    }
  };

  return {
    // State
    users,
    topBuyers,
    statistics,
    loading,
    error,
    setError,
    
    // Actions
    loadAllData,
    loadUsers,
    changeUserRole,
    toggleUserStatus,
    deleteUser,
    createUser,
    updateUser,
    loadTopBuyers
  };
};