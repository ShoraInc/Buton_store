import React, { useState, useEffect } from 'react';
import AdminLayout from '../../components/AdminLayout/AdminLayout';
import { Search, Edit, Trash2, Crown, User, Plus, TrendingUp, AlertCircle } from 'lucide-react';
import { usersAPI } from '../../services/api'; // –ò–º–ø–æ—Ä—Ç API

const AdminUsers = () => {
  const [users, setUsers] = useState([]);
  const [topBuyers, setTopBuyers] = useState([]);
  const [statistics, setStatistics] = useState({});
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [roleFilter, setRoleFilter] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadAllData();
  }, []);

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadAllData = async () => {
    setLoading(true);
    setError('');

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      const [usersResponse, topBuyersResponse, statisticsResponse] = await Promise.all([
        usersAPI.getAll(),
        usersAPI.getTopBuyers({ limit: 5 }),
        usersAPI.getStatistics()
      ]);

      setUsers(usersResponse.data.users || []);
      setTopBuyers(topBuyersResponse.data.topBuyers || []);
      setStatistics(statisticsResponse.data.statistics || {});

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    } finally {
      setLoading(false);
    }
  };

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const loadUsers = async () => {
    try {
      const response = await usersAPI.getAll();
      setUsers(response.data.users || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  };

  // üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleRoleChange = async (userId, newRole) => {
    const user = users.find(u => u.id === userId);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (user.role === 'admin' && newRole === 'user') {
      const adminCount = users.filter(u => u.role === 'admin').length;
      if (adminCount === 1) {
        setError('–ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞!');
        return;
      }
    }

    const roleText = newRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    if (!window.confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "${roleText}"?`)) {
      return;
    }

    try {
      await usersAPI.changeRole(userId, newRole);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      setUsers(users.map(user =>
        user.id === userId ? { ...user, role: newRole } : user
      ));

      setSuccess('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞');
      setTimeout(() => setSuccess(''), 3000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      setError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setTimeout(() => setError(''), 3000);
    }
  };

  // üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleToggleActive = async (userId) => {
    const user = users.find(u => u.id === userId);
    const newStatus = !user.isActive;

    try {
      await usersAPI.toggleStatus(userId, newStatus);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      setUsers(users.map(user =>
        user.id === userId ? { ...user, isActive: newStatus } : user
      ));

      setSuccess(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newStatus ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
      setTimeout(() => setSuccess(''), 3000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      setError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setTimeout(() => setError(''), 3000);
    }
  };

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleDeleteUser = async (userId) => {
    const user = users.find(u => u.id === userId);

    if (user.role === 'admin') {
      setError('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!');
      setTimeout(() => setError(''), 3000);
      return;
    }

    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
      return;
    }

    try {
      await usersAPI.delete(userId);

      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setUsers(users.filter(user => user.id !== userId));

      setSuccess('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      setTimeout(() => setSuccess(''), 3000);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      loadAllData();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      setError(errorMessage);
      setTimeout(() => setError(''), 5000);
    }
  };

  // üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const filteredUsers = users.filter(user => {
    const matchesSearch =
      user.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email?.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesRole = !roleFilter || user.role === roleFilter;
    return matchesSearch && matchesRole;
  });

  // üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
  const formatAmount = (amount) => {
    return new Intl.NumberFormat('ru-RU').format(amount || 0);
  };

  // üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  // üîÑ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <AdminLayout title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" currentPage="users">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
          <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" currentPage="users">
      {/* üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
      {error && (
        <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg flex items-center">
          <AlertCircle size={20} className="mr-2" />
          {error}
        </div>
      )}

      {success && (
        <div className="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
          ‚úÖ {success}
        </div>
      )}

      {/* üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold mb-2">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
          <p className="text-3xl font-bold text-blue-600">{statistics.totalUsers || 0}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold mb-2">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</h3>
          <p className="text-3xl font-bold text-red-600">{statistics.adminUsers || 0}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold mb-2">–ê–∫—Ç–∏–≤–Ω—ã—Ö</h3>
          <p className="text-3xl font-bold text-green-600">{statistics.activeUsers || 0}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold mb-2">–° –∑–∞–∫–∞–∑–∞–º–∏</h3>
          <p className="text-3xl font-bold text-purple-600">{statistics.usersWithOrders || 0}</p>
        </div>
      </div>

      {/* üîç –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex flex-col md:flex-row gap-4 items-center">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ email..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
            />
          </div>

          <select
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value)}
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
          >
            <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
            <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
            <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
          </select>

          <button
            onClick={loadAllData}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2"
          >
            <TrendingUp size={16} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden mb-8">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="text-left py-3 px-4">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                <th className="text-left py-3 px-4">–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
                <th className="text-left py-3 px-4">–†–æ–ª—å</th>
                <th className="text-left py-3 px-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</th>
                <th className="text-left py-3 px-4">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</th>
                <th className="text-left py-3 px-4">–°—Ç–∞—Ç—É—Å</th>
                <th className="text-left py-3 px-4">–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {filteredUsers.map(user => (
                <tr key={user.id} className="border-b hover:bg-gray-50">
                  <td className="py-3 px-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                        {user.role === 'admin' ? (
                          <Crown className="text-red-500" size={20} />
                        ) : (
                          <User className="text-gray-500" size={20} />
                        )}
                      </div>
                      <div>
                        <p className="font-medium">{user.firstName} {user.lastName}</p>
                        <p className="text-sm text-gray-600">ID: {user.id}</p>
                      </div>
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <div>
                      <p className="font-medium">{user.email}</p>
                      <p className="text-sm text-gray-600">{user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <select
                      value={user.role}
                      onChange={(e) => handleRoleChange(user.id, e.target.value)}
                      className={`px-3 py-1 rounded-full text-sm font-medium border-0 cursor-pointer transition-colors ${user.role === 'admin'
                          ? 'bg-red-100 text-red-800 hover:bg-red-200'
                          : 'bg-blue-100 text-blue-800 hover:bg-blue-200'
                        }`}
                    >
                      <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                      <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                    </select>
                  </td>
                  <td className="py-3 px-4">
                    <div>
                      <p className="font-medium">
                        {user.statistics?.totalOrders || 0} –∑–∞–∫–∞–∑–æ–≤
                      </p>
                      <p className="text-sm text-gray-600">
                        {formatAmount(user.statistics?.totalSpent || 0)} ‚Ç∏
                      </p>
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <p className="text-sm">
                      {formatDate(user.createdAt)}
                    </p>
                  </td>
                  <td className="py-3 px-4">
                    <button
                      onClick={() => handleToggleActive(user.id)}
                      className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${user.isActive
                          ? 'bg-green-100 text-green-800 hover:bg-green-200'
                          : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                        }`}
                    >
                      {user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                    </button>
                  </td>
                  <td className="py-3 px-4">
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => handleDeleteUser(user.id)}
                        className={`textAlign-center p-2 rounded transition-colors ${user.role === 'admin'
                            ? 'text-gray-400 cursor-not-allowed'
                            : 'text-red-600 hover:bg-red-50'
                          }`}
                        title={user.role === 'admin' ? '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                        disabled={user.role === 'admin'}
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {filteredUsers.length === 0 && (
          <div className="text-center py-12">
            <User size={64} className="mx-auto text-gray-300 mb-4" />
            <p className="text-xl text-gray-500">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            <p className="text-gray-400">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}
      </div>

      {/* üèÜ –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
          <Crown className="text-yellow-500" size={20} />
          –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
        </h3>

        {topBuyers.length > 0 ? (
          <div className="space-y-3">
            {topBuyers.map((buyer, index) => (
              <div key={buyer.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                <div className="flex items-center gap-3">
                  <span className={`font-bold text-lg ${index === 0 ? 'text-yellow-500' :
                      index === 1 ? 'text-gray-400' :
                        index === 2 ? 'text-orange-400' : 'text-gray-500'
                    }`}>
                    #{index + 1}
                  </span>
                  <div>
                    <p className="font-medium">{buyer.firstName} {buyer.lastName}</p>
                    <p className="text-sm text-gray-600">
                      {buyer.totalOrders} –∑–∞–∫–∞–∑–æ–≤ ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {formatAmount(buyer.avgOrderValue)} ‚Ç∏
                    </p>
                  </div>
                </div>
                <p className="font-bold text-green-600">{formatAmount(buyer.totalSpent)} ‚Ç∏</p>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <TrendingUp size={48} className="mx-auto text-gray-300 mb-2" />
            <p className="text-gray-500">–î–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminUsers;