// pages/Checkout/Checkout.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, MapPin, Phone, User, CreditCard, Calendar, Clock, ShoppingBag, AlertCircle } from 'lucide-react';
import { cartService } from '../../services/cartService';
import { ordersAPI } from '../../services';
import { useAuth } from '../../hooks/useAuth';
import Header from '../../components/Header/Header';
import Footer from '../../components/Footer/Footer';

const Checkout = () => {
  const navigate = useNavigate();
  const { user, authLoading } = useAuth();

  const [cartData, setCartData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [fieldErrors, setFieldErrors] = useState({}); // ‚úÖ –û—à–∏–±–∫–∏ –ø–æ–ª–µ–π

  // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
  const [orderData, setOrderData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    deliveryType: 'delivery',
    address: '',
    city: '–°–µ–º–µ–π',
    entrance: '',
    floor: '',
    apartment: '',
    deliveryDate: '',
    deliveryTime: '',
    paymentMethod: 'cash',
    comment: ''
  });

  // ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç backend)
  const validationRules = {
    firstName: {
      required: true,
      minLength: 2,
      maxLength: 100,
      message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'
    },
    lastName: {
      required: true,
      minLength: 2,
      maxLength: 100,
      message: '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'
    },
    phone: {
      required: true,
      pattern: /^[\+]?[1-9][\d]{0,15}$/,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    },
    email: {
      required: false,
      pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
    },
    address: {
      required: true,
      minLength: 5, // ‚úÖ –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è "–°–∞–º–æ–≤—ã–≤–æ–∑"
      maxLength: 500,
      message: '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤'
    },
    deliveryDate: {
      required: true,
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏'
    },
    deliveryTime: {
      required: true,
      pattern: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'
    },
    comment: {
      required: false,
      maxLength: 1000,
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤'
    }
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è
  const validateField = (name, value) => {
    const rule = validationRules[name];
    if (!rule) return null;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ
    if (name === 'address' && orderData.deliveryType === 'pickup') {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (rule.required && (!value || value.trim() === '')) {
      return rule.message;
    }

    // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!rule.required && (!value || value.trim() === '')) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if (rule.minLength && value.trim().length < rule.minLength) {
      return rule.message;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if (rule.maxLength && value.trim().length > rule.maxLength) {
      return rule.message;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    if (rule.pattern && !rule.pattern.test(value.trim())) {
      return rule.message;
    }

    return null;
  };

  // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
  const validateAllFields = () => {
    const errors = {};

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    Object.keys(validationRules).forEach(fieldName => {
      const error = validateField(fieldName, orderData[fieldName]);
      if (error) {
        errors[fieldName] = error;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    if (!cartData || !cartData.items || cartData.items.length === 0) {
      errors.cart = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if (cartData?.items) {
      cartData.items.forEach((item, index) => {
        if (!item.Product?.id) {
          errors[`item_${index}`] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ';
        }
        if (!item.quantity || item.quantity < 1 || item.quantity > 100) {
          errors[`item_${index}_quantity`] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞';
        }
      });
    }

    return errors;
  };

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleInputChange = (field, value) => {
    setOrderData(prev => ({
      ...prev,
      [field]: value
    }));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const error = validateField(field, value);
    setFieldErrors(prev => ({
      ...prev,
      [field]: error
    }));

    // –û—á–∏—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    if (error === null && fieldErrors[field]) {
      setFieldErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      setOrderData(prev => ({
        ...prev,
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        phone: user.phone || '',
        email: user.email || ''
      }));
    }
  }, [user]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  useEffect(() => {
    loadCart();
  }, []);

  const loadCart = async () => {
    setLoading(true);
    try {
      const response = await cartService.getCart();
      if (!response.cart || !response.cart.items || response.cart.items.length === 0) {
        navigate('/');
        return;
      }
      setCartData(response.cart);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitOrder = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    setError('');

    try {
      // ‚úÖ –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const errors = validateAllFields();

      if (Object.keys(errors).length > 0) {
        setFieldErrors(errors);
        const firstError = Object.values(errors)[0];
        setError(firstError);
        setSubmitting(false);
        return;
      }

      // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backend
      const orderPayload = {
        items: cartData.items.map(item => ({
          productId: item.Product.id,
          quantity: item.quantity
        })),
        deliveryAddress: orderData.deliveryType === 'delivery'
          ? `${orderData.address}${orderData.entrance ? ', –ø–æ–¥. ' + orderData.entrance : ''}${orderData.floor ? ', —ç—Ç. ' + orderData.floor : ''}${orderData.apartment ? ', –∫–≤. ' + orderData.apartment : ''}`.trim()
          : '–°–∞–º–æ–≤—ã–≤–æ–∑',

        // ‚úÖ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (backend —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ ISO8601)
        deliveryDate: orderData.deliveryDate || null,
        deliveryTime: orderData.deliveryTime || null,

        customerPhone: orderData.phone.trim(),
        customerName: `${orderData.firstName.trim()} ${orderData.lastName.trim()}`,

        // ‚úÖ –í—Å–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ null –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ
        recipientName: null,
        recipientPhone: null,
        specialInstructions: orderData.comment.trim() || null,
        paymentMethod: orderData.paymentMethod,
        isGift: false,
        giftMessage: null,
        isAnonymous: false
      };

      // ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(orderPayload, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:');
      console.log('- items count:', orderPayload.items.length);
      console.log('- deliveryAddress length:', orderPayload.deliveryAddress.length);
      console.log('- customerPhone:', orderPayload.customerPhone);
      console.log('- customerName length:', orderPayload.customerName.length);
      console.log('- deliveryDate:', orderPayload.deliveryDate);
      console.log('- deliveryTime:', orderPayload.deliveryTime);
      console.log('- paymentMethod:', orderPayload.paymentMethod);

      const response = await ordersAPI.createOrder(orderPayload);

      if (response.data.success) {
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await cartService.clearCart();

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
        navigate(`/order-success/${response.data.data.id}`);
      } else {
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }

    } catch (err) {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      console.error('‚ùå Response data:', err.response?.data);
      console.error('‚ùå Response status:', err.response?.status);

      // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (err.response?.data?.errors) {
        const validationErrors = err.response.data.errors.map(e => `${e.path}: ${e.msg}`).join('\n');
        setError(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n${validationErrors}`);
        console.error('üìù –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', err.response.data.errors);
      } else {
        setError(err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } finally {
      setSubmitting(false);
    }
  };

  // ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–ª—è
  const FieldError = ({ fieldName }) => {
    if (!fieldErrors[fieldName]) return null;

    return (
      <div className="flex items-center gap-1 mt-1 text-red-600 text-sm">
        <AlertCircle size={14} />
        <span>{fieldErrors[fieldName]}</span>
      </div>
    );
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø–æ–ª—è —Å –æ—à–∏–±–∫–æ–π
  const getFieldClassName = (fieldName, baseClassName) => {
    return fieldErrors[fieldName]
      ? `${baseClassName} border-red-500 focus:ring-red-500`
      : `${baseClassName} border-gray-300 focus:ring-black`;
  };

  const getImageUrl = (imageName) => {
    const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:4000';
    const image = Array.isArray(imageName) ? imageName[0] : imageName;
    return `${baseUrl}/uploads/products/${image}`;
  };

  const getMinDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  const getTimeSlots = () => {
    const slots = [];
    for (let hour = 9; hour <= 21; hour++) {
      slots.push(`${hour}:00`);
      if (hour < 21) {
        slots.push(`${hour}:30`);
      }
    }
    return slots;
  };

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormValid = () => {
    const errors = validateAllFields();
    return Object.keys(errors).length === 0;
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black mx-auto"></div>
            <p className="mt-4 text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black mx-auto"></div>
            <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</p>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <div className="container mx-auto px-4 py-8">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ */}
        <button
          onClick={() => navigate(-1)}
          className="flex items-center gap-2 text-gray-600 hover:text-black mb-6"
        >
          <ArrowLeft size={20} />
          –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∫–∞–º
        </button>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ */}
          <div className="bg-white rounded-lg p-6">
            <h1 className="text-2xl font-bold mb-6">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 flex items-center gap-2">
                <AlertCircle size={16} />
                <span>{error}</span>
              </div>
            )}

            <form onSubmit={handleSubmitOrder} className="space-y-6">
              {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                  <User size={20} />
                  –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h3>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <input
                      type="text"
                      placeholder="–ò–º—è *"
                      value={orderData.firstName}
                      onChange={(e) => handleInputChange('firstName', e.target.value)}
                      className={getFieldClassName('firstName', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                      required
                    />
                    <FieldError fieldName="firstName" />
                  </div>
                  <div>
                    <input
                      type="text"
                      placeholder="–§–∞–º–∏–ª–∏—è *"
                      value={orderData.lastName}
                      onChange={(e) => handleInputChange('lastName', e.target.value)}
                      className={getFieldClassName('lastName', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                      required
                    />
                    <FieldError fieldName="lastName" />
                  </div>
                  <div>
                    <input
                      type="tel"
                      placeholder="–¢–µ–ª–µ—Ñ–æ–Ω *"
                      value={orderData.phone}
                      onChange={(e) => handleInputChange('phone', e.target.value)}
                      className={getFieldClassName('phone', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                      required
                    />
                    <FieldError fieldName="phone" />
                  </div>
                  <div>
                    <input
                      type="email"
                      placeholder="Email"
                      value={orderData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      className={getFieldClassName('email', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                    />
                    <FieldError fieldName="email" />
                  </div>
                </div>
              </div>

              {/* –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                  <MapPin size={20} />
                  –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è
                </h3>
                <div className="grid md:grid-cols-2 gap-4 mb-4">
                  <label className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="deliveryType"
                      value="delivery"
                      checked={orderData.deliveryType === 'delivery'}
                      onChange={(e) => handleInputChange('deliveryType', e.target.value)}
                    />
                    <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                  </label>
                  <label className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="deliveryType"
                      value="pickup"
                      checked={orderData.deliveryType === 'pickup'}
                      onChange={(e) => handleInputChange('deliveryType', e.target.value)}
                    />
                    <span>–°–∞–º–æ–≤—ã–≤–æ–∑</span>
                  </label>
                </div>

                {orderData.deliveryType === 'delivery' && (
                  <div className="space-y-4">
                    <div>
                      <input
                        type="text"
                        placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *"
                        value={orderData.address}
                        onChange={(e) => handleInputChange('address', e.target.value)}
                        className={getFieldClassName('address', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                        required
                      />
                      <FieldError fieldName="address" />
                    </div>
                    <div className="grid md:grid-cols-3 gap-4">
                      <input
                        type="text"
                        placeholder="–ü–æ–¥—ä–µ–∑–¥"
                        value={orderData.entrance}
                        onChange={(e) => handleInputChange('entrance', e.target.value)}
                        className="border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black"
                      />
                      <input
                        type="text"
                        placeholder="–≠—Ç–∞–∂"
                        value={orderData.floor}
                        onChange={(e) => handleInputChange('floor', e.target.value)}
                        className="border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black"
                      />
                      <input
                        type="text"
                        placeholder="–ö–≤–∞—Ä—Ç–∏—Ä–∞"
                        value={orderData.apartment}
                        onChange={(e) => handleInputChange('apartment', e.target.value)}
                        className="border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black"
                      />
                    </div>
                  </div>
                )}
              </div>

              {/* –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                  <Clock size={20} />
                  –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                </h3>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <input
                      type="date"
                      value={orderData.deliveryDate}
                      min={getMinDate()}
                      onChange={(e) => handleInputChange('deliveryDate', e.target.value)}
                      className={getFieldClassName('deliveryDate', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                      required
                    />
                    <FieldError fieldName="deliveryDate" />
                  </div>
                  <div>
                    <select
                      value={orderData.deliveryTime}
                      onChange={(e) => handleInputChange('deliveryTime', e.target.value)}
                      className={getFieldClassName('deliveryTime', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                      required
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                      {getTimeSlots().map(slot => (
                        <option key={slot} value={slot}>{slot}</option>
                      ))}
                    </select>
                    <FieldError fieldName="deliveryTime" />
                  </div>
                </div>
              </div>

              {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
              <div>
                <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                  <CreditCard size={20} />
                  –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                </h3>
                <div className="space-y-2">
                  <label className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="cash"
                      checked={orderData.paymentMethod === 'cash'}
                      onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    />
                    <span>–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</span>
                  </label>
                  <label className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="card"
                      checked={orderData.paymentMethod === 'card'}
                      onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    />
                    <span>–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</span>
                  </label>
                  <label className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="online"
                      checked={orderData.paymentMethod === 'online'}
                      onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    />
                    <span>–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞</span>
                  </label>
                </div>
              </div>

              {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              <div>
                <h3 className="text-lg font-medium mb-4">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</h3>
                <div>
                  <textarea
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                    value={orderData.comment}
                    onChange={(e) => handleInputChange('comment', e.target.value)}
                    rows={3}
                    className={getFieldClassName('comment', 'w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2')}
                  />
                  <FieldError fieldName="comment" />
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ */}
              <button
                type="submit"
                disabled={submitting || !isFormValid()}
                className={`w-full py-3 rounded-lg font-medium transition-colors ${submitting || !isFormValid()
                  ? 'bg-gray-400 text-gray-700 cursor-not-allowed'
                  : 'bg-black text-white hover:bg-gray-800'
                  }`}
              >
                {submitting ? '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
              </button>

              {/* ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
              {!isFormValid() && !submitting && (
                <p className="text-sm text-gray-500 text-center">
                  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                </p>
              )}
            </form>
          </div>

          {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
          <div className="bg-white rounded-lg p-6 h-fit">
            <h2 className="text-xl font-bold mb-6 flex items-center gap-2">
              <ShoppingBag size={20} />
              –í–∞—à –∑–∞–∫–∞–∑
            </h2>

            {cartData && cartData.items && (
              <div className="space-y-4">
                {cartData.items.map((item) => (
                  <div key={item.id} className="flex items-center gap-4 pb-4 border-b">
                    <div className="w-16 h-16 flex-shrink-0">
                      <img
                        src={getImageUrl(item.Product.images)}
                        alt={item.Product.name}
                        className="w-full h-full object-cover rounded"
                        onError={(e) => {
                          e.target.src = '/api/placeholder/64/64';
                        }}
                      />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium">{item.Product.name}</h4>
                      <p className="text-sm text-gray-600">
                        {parseFloat(item.priceAtTime).toLocaleString()} ‚Ç∏ √ó {item.quantity}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="font-bold">
                        {(parseFloat(item.priceAtTime) * item.quantity).toLocaleString()} ‚Ç∏
                      </p>
                    </div>
                  </div>
                ))}

                <div className="pt-4">
                  <div className="flex justify-between items-center text-xl font-bold">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span>{cartData.totalAmount?.toLocaleString()} ‚Ç∏</span>
                  </div>
                  {orderData.deliveryType === 'delivery' && (
                    <p className="text-sm text-gray-600 mt-2">
                      * –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                    </p>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default Checkout;