// services/orderService.js
import api from './api';

class OrderService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserOrders() {
    try {
      console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ api.js...');
      
      const response = await api.get('/orders');
      
      console.log('‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      
      // api.js —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—à–∏–±–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–µ
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ ID
  async getOrderById(orderId) {
    try {
      const response = await api.get(`/orders/${orderId}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  async createOrder(orderData) {
    try {
      const response = await api.post('/orders', orderData);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
  async reorderOrder(orderId) {
    try {
      const response = await api.post(`/orders/${orderId}/reorder`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  async cancelOrder(orderId) {
    try {
      const response = await api.put(`/orders/${orderId}/cancel`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∞–ª–∏–∞—Å –¥–ª—è getUserOrders)
  async getOrders() {
    return this.getUserOrders();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ (–∞–ª–∏–∞—Å –¥–ª—è getOrderById)
  async getOrder(orderId) {
    return this.getOrderById(orderId);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  async updateOrderStatus(orderId, status) {
    try {
      const response = await api.patch(`/orders/${orderId}/status`, { status });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getOrderStats() {
    try {
      const response = await api.get('/orders/stats');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É
  async searchOrders(query, filters = {}) {
    try {
      const params = new URLSearchParams();
      
      if (query) {
        params.append('search', query);
      }
      
      if (filters.status) {
        params.append('status', filters.status);
      }
      
      if (filters.dateFrom) {
        params.append('dateFrom', filters.dateFrom);
      }
      
      if (filters.dateTo) {
        params.append('dateTo', filters.dateTo);
      }

      const response = await api.get(`/orders/search?${params.toString()}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
  async updateDeliveryAddress(orderId, newAddress) {
    try {
      const response = await api.put(`/orders/${orderId}/delivery-address`, {
        deliveryAddress: newAddress
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      throw error;
    }
  }

  // –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ
  async addOrderReview(orderId, reviewData) {
    try {
      const response = await api.post(`/orders/${orderId}/review`, reviewData);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async getOrderHistory(orderId) {
    try {
      const response = await api.get(`/orders/${orderId}/history`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–∫–∞–∑–∞
  async requestReturn(orderId, reason, items = []) {
    try {
      const response = await api.post(`/orders/${orderId}/return`, {
        reason,
        items
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –°–∫–∞—á–∞—Ç—å —á–µ–∫/–∏–Ω–≤–æ–π—Å –∑–∞–∫–∞–∑–∞
  async downloadInvoice(orderId) {
    try {
      const response = await api.get(`/orders/${orderId}/invoice`, {
        responseType: 'blob'
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ–∫–∞:', error);
      throw error;
    }
  }

  // –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑
  async trackOrder(orderId) {
    try {
      const response = await api.get(`/orders/${orderId}/track`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
  async getDeliverySlots(date) {
    try {
      const response = await api.get(`/orders/delivery-slots?date=${date}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      throw error;
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
  async calculateDelivery(address, items) {
    try {
      const response = await api.post('/orders/calculate-delivery', {
        address,
        items
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
  async validatePromoCode(code, items) {
    try {
      const response = await api.post('/orders/validate-promo', {
        promoCode: code,
        items
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      throw error;
    }
  }
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∫–∞–∫ default, –∏ –∫–∞–∫ named export –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const orderService = new OrderService();
export { orderService };
export default orderService;