// services/api.js
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';

// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const api = axios.create({
  baseURL: `${API_BASE_URL}/api`,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, {
        params: config.params,
        data: config.data
      });
    }

    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    }
    return response;
  },
  (error) => {
    console.error('‚ùå Response Error:', error);

    if (error.response?.status === 401) {
      // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
      localStorage.removeItem('authToken');
      localStorage.removeItem('user');
      window.dispatchEvent(new Event('authStateChanged'));

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –Ω–µ–π
      if (window.location.pathname !== '/') {
        window.location.href = '/';
      }
    }

    return Promise.reject(error);
  }
);

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
export const productsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  getAll: (params = {}) => {
    const queryParams = new URLSearchParams();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query string
    Object.keys(params).forEach(key => {
      if (params[key] !== undefined && params[key] !== null && params[key] !== '') {
        queryParams.append(key, params[key]);
      }
    });

    const queryString = queryParams.toString();
    const url = queryString ? `/products?${queryString}` : '/products';

    return api.get(url);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
  getById: (id) => {
    return api.get(`/products/${id}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
  create: (productData) => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ FormData, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (productData instanceof FormData) {
      return api.post('/products', productData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
    }

    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º FormData
    const formData = new FormData();
    Object.keys(productData).forEach(key => {
      if (productData[key] !== undefined && productData[key] !== null) {
        if (key === 'tags' && Array.isArray(productData[key])) {
          formData.append(key, JSON.stringify(productData[key]));
        } else {
          formData.append(key, productData[key]);
        }
      }
    });

    return api.post('/products', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  update: (id, productData) => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ FormData, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (productData instanceof FormData) {
      return api.put(`/products/${id}`, productData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
    }

    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º FormData
    const formData = new FormData();
    Object.keys(productData).forEach(key => {
      if (productData[key] !== undefined && productData[key] !== null) {
        if (key === 'tags' && Array.isArray(productData[key])) {
          formData.append(key, JSON.stringify(productData[key]));
        } else if (key === 'images' && Array.isArray(productData[key])) {
          formData.append(key, JSON.stringify(productData[key]));
        } else {
          formData.append(key, productData[key]);
        }
      }
    });

    return api.put(`/products/${id}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  delete: (id) => {
    return api.delete(`/products/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  getCategories: () => {
    return api.get('/products/categories');
  },

  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  search: (query, filters = {}) => {
    const params = {
      search: query,
      ...filters
    };
    return api.get('/products', { params });
  }
};

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
export const uploadAPI = {
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  uploadImages: (files) => {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ FormData
    if (Array.isArray(files)) {
      files.forEach((file) => {
        formData.append('images', file);
      });
    } else {
      formData.append('images', files);
    }

    return api.post('/upload/images', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
      onUploadProgress: (progressEvent) => {
        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
        console.log(`üì§ Upload Progress: ${percentCompleted}%`);
      }
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  deleteImage: (filename) => {
    return api.delete(`/upload/images/${filename}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getImageUrl: (filename) => {
    return `${API_BASE_URL}/uploads/products/${filename}`;
  }
};

// API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const authAPI = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  register: (userData) => {
    return api.post('/auth/register', userData);
  },

  // –í—Ö–æ–¥
  login: (credentials) => {
    return api.post('/auth/login', credentials);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getProfile: () => {
    return api.get('/auth/profile');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  updateProfile: (userData) => {
    return api.put('/auth/profile', userData);
  },

  // –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
  changePassword: (passwordData) => {
    return api.put('/auth/change-password', passwordData);
  }
};

// API –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
export const cartAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCart: () => {
    return api.get('/cart');
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  addToCart: (productId, quantity = 1) => {
    return api.post('/cart/add', { productId, quantity });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  updateCartItem: (itemId, quantity) => {
    return api.put('/cart/update', { itemId, quantity });
  },

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  removeFromCart: (itemId) => {
    return api.delete(`/cart/remove/${itemId}`);
  },

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  clearCart: () => {
    return api.delete('/cart/clear');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  getCartCount: () => {
    return api.get('/cart/count');
  }
};

// API –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export const favoritesAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  getFavorites: () => {
    return api.get('/favorites');
  },

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  addToFavorites: (productId) => {
    return api.post('/favorites/add', { productId });
  },

  // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  removeFromFavorites: (productId) => {
    return api.delete(`/favorites/remove/${productId}`);
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  checkFavorite: (productId) => {
    return api.get(`/favorites/check/${productId}`);
  }
};

// orders API service
export const ordersAPI = {
  // ============ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–û–î–´ ============
  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserOrders: (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return api.get(`/orders?${queryParams}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  createOrder: (orderData) => {
    return api.post('/orders', orderData);
  },

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  reorderOrder: (id) => {
    return api.post(`/orders/${id}/reorder`);
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  getOrder: (orderId) => {
    return api.get(`/orders/${orderId}`);
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  cancelOrder: (orderId) => {
    return api.put(`/orders/${orderId}/cancel`);
  },

  // ============ –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ ============
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞) —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  getAllOrders: (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return api.get(`/admin/orders?${queryParams}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  getAdminOrderById: (orderId) => {
    return api.get(`/admin/orders/${orderId}`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  updateOrderStatus: (orderId, status) => {
    return api.put(`/admin/orders/${orderId}/status`, { status });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤
  getOrdersTotalSum: (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return api.get(`/admin/orders/total-sum?${queryParams}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  getOrdersStatistics: () => {
    return api.get('/admin/orders/statistics');
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  getOrdersSumByPeriod: (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return api.get(`/admin/orders/sum-by-period?${queryParams}`);
  },

  // ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ============
  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  searchOrders: (searchQuery, filters = {}) => {
    const params = {
      search: searchQuery,
      ...filters
    };
    return ordersAPI.getAllOrders(params);
  },

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  getOrdersByStatus: (status, params = {}) => {
    return ordersAPI.getAllOrders({
      status,
      ...params
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
  getOrdersByDateRange: (startDate, endDate, params = {}) => {
    return ordersAPI.getAllOrders({
      startDate,
      endDate,
      ...params
    });
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const apiUtils = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getImageUrl: (filename) => {
    if (!filename) return null;
    return `${API_BASE_URL}/uploads/products/${filename}`;
  },

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É API
  handleError: (error) => {
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
      const message = error.response.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ';
      const status = error.response.status;

      console.error(`API Error ${status}:`, message);
      return { message, status };
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
      console.error('Network Error:', error.request);
      return { message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', status: 0 };
    } else {
      // –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error('Request Error:', error.message);
      return { message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', status: -1 };
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  checkHealth: () => {
    return api.get('/health').catch(() => {
      throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    });
  }
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const usersAPI = {
  // üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
  getAll: () => {
    return api.get('/users');
  },

  // üë§ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  getById: (id) => {
    return api.get(`/users/${id}`);
  },

  // üîë –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: () => {
    return api.get('/users/me');
  },

  // ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  create: (userData) => {
    return api.post('/users', userData);
  },

  // ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  update: (id, userData) => {
    return api.put(`/users/${id}`, userData);
  },

  // üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete: (id) => {
    return api.delete(`/users/${id}`);
  },

  // üèÜ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
  getTopBuyers: (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return api.get(`/users/top-buyers${queryParams ? `?${queryParams}` : ''}`);
  },

  // üìä –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  getStatistics: () => {
    return api.get('/users/statistics');
  },

  // üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  changeRole: (id, role) => {
    return api.put(`/users/${id}`, { role });
  },

  // üîê –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  toggleStatus: (id, isActive) => {
    return api.put(`/users/${id}`, { isActive });
  },

  // üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  changePassword: (id, password) => {
    return api.put(`/users/${id}`, { password });
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios
export default api;