// controllers/productController.js
const { Product, Favorite } = require('../models');
const { Op } = require('sequelize');

const productController = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  getProducts: async (req, res) => {
    try {
      const {
        page = 1,
        limit = 8,
        category,
        minPrice,
        maxPrice,
        isNew,
        isBudget,
        hasDiscount,
        search,
        sortBy = 'createdAt',
        sortOrder = 'DESC',
        isActive = true
      } = req.query;

      console.log('üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', req.query);

      const offset = (page - 1) * limit;
      const where = {};

      // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
      if (isActive !== 'false') {
        where.isActive = true;
      }

      // –§–∏–ª—å—Ç—Ä—ã
      if (category && category !== '') {
        where.category = category;
      }
      
      // –¶–µ–Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (minPrice || maxPrice) {
        where.price = {};
        if (minPrice) where.price[Op.gte] = parseFloat(minPrice);
        if (maxPrice) where.price[Op.lte] = parseFloat(maxPrice);
      }
      
      // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º —Ç–æ–≤–∞—Ä–∞
      if (isNew === 'true') where.isNew = true;
      if (isBudget === 'true') where.isBudget = true;
      if (hasDiscount === 'true') {
        where.discountPrice = { [Op.not]: null };
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
      if (search && search.trim() !== '') {
        where[Op.or] = [
          { name: { [Op.iLike]: `%${search.trim()}%` } },
          { description: { [Op.iLike]: `%${search.trim()}%` } }
        ];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å sortBy
      const allowedSortFields = ['createdAt', 'name', 'price', 'category', 'inStock'];
      const sortField = allowedSortFields.includes(sortBy) ? sortBy : 'createdAt';
      const sortDirection = sortOrder.toUpperCase() === 'ASC' ? 'ASC' : 'DESC';

      console.log('üìä WHERE —É—Å–ª–æ–≤–∏—è:', where);
      console.log('üìà –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', { sortField, sortDirection });

      const { count, rows: products } = await Product.findAndCountAll({
        where,
        limit: parseInt(limit),
        offset: parseInt(offset),
        order: [[sortField, sortDirection]],
        include: [
          {
            model: Favorite,
            as: 'likes',
            attributes: ['userId'],
            required: false
          }
        ]
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${count}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${products.length}`);

      res.json({
        products,
        pagination: {
          currentPage: parseInt(page),
          totalPages: Math.ceil(count / limit),
          totalItems: count,
          itemsPerPage: parseInt(limit),
          hasNextPage: page < Math.ceil(count / limit),
          hasPrevPage: page > 1
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
  getProduct: async (req, res) => {
    try {
      const { id } = req.params;
      
      console.log('üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ ID:', id);

      if (!id || isNaN(id)) {
        return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' });
      }
      
      const product = await Product.findOne({
        where: { id, isActive: true },
        include: [
          {
            model: Favorite,
            as: 'likes',
            attributes: ['userId'],
            required: false
          }
        ]
      });

      if (!product) {
        console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
        return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      console.log('‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:', product.name);

      res.json({ product });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  createProduct: async (req, res) => {
    try {
      const {
        name,
        description,
        price,
        discountPrice,
        category,
        inStock,
        isNew,
        isReady,
        isBudget,
        tags,
        images: imagesFromBody
      } = req.body;

      console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { name, category, price });
      console.log('üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', req.files?.length || 0);
      console.log('üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !name.trim()) {
        return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
      }

      if (!price || price <= 0) {
        return res.status(400).json({ message: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' });
      }

      if (!category) {
        return res.status(400).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
      if (discountPrice && parseFloat(discountPrice) >= parseFloat(price)) {
        return res.status(400).json({ 
          message: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã' 
        });
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      let images = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (req.files && req.files.length > 0) {
        images = req.files.map(file => file.filename);
        console.log('üì∏ –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤:', images);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)
      if (imagesFromBody) {
        try {
          const existingImages = typeof imagesFromBody === 'string' 
            ? JSON.parse(imagesFromBody) 
            : imagesFromBody;
          
          if (Array.isArray(existingImages)) {
            images = [...images, ...existingImages];
            console.log('üì∏ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', existingImages);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        }
      }

      console.log('üì∏ –ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', images);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤
      let parsedTags = [];
      if (tags) {
        try {
          parsedTags = typeof tags === 'string' ? JSON.parse(tags) : tags;
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤:', error);
          parsedTags = [];
        }
      }

      const productData = {
        name: name.trim(),
        description: description?.trim() || '',
        price: parseFloat(price),
        discountPrice: discountPrice ? parseFloat(discountPrice) : null,
        category,
        images, // ‚úÖ –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        inStock: parseInt(inStock) || 0,
        isNew: isNew === 'true' || isNew === true,
        isReady: isReady === 'true' || isReady === true,
        isBudget: isBudget === 'true' || isBudget === true,
        tags: parsedTags
      };

      console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', productData);

      const product = await Product.create(productData);

      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', { id: product.id, name: product.name, images: product.images });

      res.status(201).json({
        message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        product
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Sequelize
      if (error.name === 'SequelizeValidationError') {
        const validationErrors = error.errors.map(err => err.message);
        return res.status(400).json({ 
          message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 
          errors: validationErrors 
        });
      }

      res.status(400).json({ message: error.message });
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  updateProduct: async (req, res) => {
    try {
      const { id } = req.params;
      const updateData = { ...req.body };

      console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID:', id);
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', Object.keys(updateData));

      if (!id || isNaN(id)) {
        return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = await Product.findByPk(id);
      if (!existingProduct) {
        return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π
      if (updateData.name && !updateData.name.trim()) {
        return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
      }

      if (updateData.price && updateData.price <= 0) {
        return res.status(400).json({ message: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' });
      }

      if (updateData.discountPrice && updateData.price && 
          parseFloat(updateData.discountPrice) >= parseFloat(updateData.price)) {
        return res.status(400).json({ 
          message: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã' 
        });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (req.files && req.files.length > 0) {
        const newImages = req.files.map(file => file.filename);
        console.log('üì∏ –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', newImages);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å –Ω–æ–≤—ã–º–∏
        if (updateData.images) {
          try {
            const existingImages = typeof updateData.images === 'string' 
              ? JSON.parse(updateData.images) 
              : updateData.images;
            updateData.images = [...existingImages, ...newImages];
          } catch (error) {
            updateData.images = newImages;
          }
        } else {
          updateData.images = [...(existingProduct.images || []), ...newImages];
        }
      } else if (updateData.images && typeof updateData.images === 'string') {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏—Ö
        try {
          updateData.images = JSON.parse(updateData.images);
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤
      if (updateData.tags && typeof updateData.tags === 'string') {
        try {
          updateData.tags = JSON.parse(updateData.tags);
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤:', error);
          updateData.tags = [];
        }
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      ['isNew', 'isReady', 'isBudget'].forEach(field => {
        if (updateData[field] !== undefined) {
          updateData[field] = updateData[field] === 'true' || updateData[field] === true;
        }
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      ['price', 'discountPrice', 'inStock'].forEach(field => {
        if (updateData[field] !== undefined && updateData[field] !== '') {
          updateData[field] = parseFloat(updateData[field]) || 0;
        }
      });

      // –û–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
      if (updateData.name) updateData.name = updateData.name.trim();
      if (updateData.description) updateData.description = updateData.description.trim();

      const [updated] = await Product.update(updateData, {
        where: { id }
      });

      if (!updated) {
        return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω' });
      }

      const product = await Product.findByPk(id);
      
      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', product.name);

      res.json({
        message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        product
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Sequelize
      if (error.name === 'SequelizeValidationError') {
        const validationErrors = error.errors.map(err => err.message);
        return res.status(400).json({ 
          message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 
          errors: validationErrors 
        });
      }

      res.status(400).json({ message: error.message });
    }
  },

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) - –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  deleteProduct: async (req, res) => {
    try {
      const { id } = req.params;

      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID:', id);

      if (!id || isNaN(id)) {
        return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = await Product.findByPk(id);
      if (!existingProduct) {
        return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isActive = false
      const [deleted] = await Product.update(
        { isActive: false },
        { where: { id } }
      );

      if (!deleted) {
        return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ):', existingProduct.name);

      res.json({ 
        message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        productId: id 
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCategories: async (req, res) => {
    try {
      console.log('üìÇ –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤');

      const categories = await Product.findAll({
        attributes: ['category'],
        group: ['category'],
        where: { isActive: true },
        raw: true
      });

      const categoryList = categories.map(item => item.category).filter(Boolean);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      const predefinedCategories = [
        '–ö–æ–º–±–æ', '–°–±–æ—Ä–Ω—ã–µ –±—É–∫–µ—Ç—ã', '–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏', '–†–æ–∑—ã', 
        '–ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–°–ª–∞–¥–æ—Å—Ç–∏', '–ò–≥—Ä—É—à–∫–∏'
      ];

      const allCategories = [...new Set([...predefinedCategories, ...categoryList])];

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', allCategories.length);

      res.json({ 
        categories: allCategories,
        count: allCategories.length 
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
  searchProducts: async (req, res) => {
    try {
      const { q: query, category, limit = 10 } = req.query;

      if (!query || query.trim().length < 2) {
        return res.status(400).json({ message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' });
      }

      console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:', { query, category });

      const where = {
        isActive: true,
        [Op.or]: [
          { name: { [Op.iLike]: `%${query.trim()}%` } },
          { description: { [Op.iLike]: `%${query.trim()}%` } }
        ]
      };

      if (category && category !== '') {
        where.category = category;
      }

      const products = await Product.findAll({
        where,
        limit: parseInt(limit),
        order: [['createdAt', 'DESC']],
        include: [
          {
            model: Favorite,
            as: 'likes',
            attributes: ['userId'],
            required: false
          }
        ]
      });

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', products.length);

      res.json({
        query,
        products,
        count: products.length
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  getPopularProducts: async (req, res) => {
    try {
      const { limit = 8 } = req.query;

      console.log('üî• –ó–∞–ø—Ä–æ—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');

      const products = await Product.findAll({
        where: { isActive: true },
        order: [
          ['rating', 'DESC'],
          ['reviewCount', 'DESC'],
          ['createdAt', 'DESC']
        ],
        limit: parseInt(limit),
        include: [
          {
            model: Favorite,
            as: 'likes',
            attributes: ['userId'],
            required: false
          }
        ]
      });

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', products.length);

      res.json({
        products,
        count: products.length
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(400).json({ message: error.message });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
  getNewProducts: async (req, res) => {
    try {
      const { limit = 8 } = req.query;

      console.log('üÜï –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');

      const products = await Product.findAll({
        where: { 
          isActive: true,
          isNew: true 
        },
        order: [['createdAt', 'DESC']],
        limit: parseInt(limit),
        include: [
          {
            model: Favorite,
            as: 'likes',
            attributes: ['userId'],
            required: false
          }
        ]
      });

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', products.length);

      res.json({
        products,
        count: products.length
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(400).json({ message: error.message });
    }
  }
};

module.exports = productController;