const { Order, OrderItem, Product, User, sequelize } = require('../models');
const { validationResult } = require('express-validator');
const { Op } = require('sequelize');

class OrderController {

  // ============ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–û–î–´ ============

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥)
  async ordersFindAll(req, res) {
    try {
      const response = await Order.findAll();
      res.status(200).json({ orders: response })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(400).json({ message: error.message });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserOrders(req, res) {
    try {
      const userId = req.user.id;
      const page = parseInt(req.query.page) || 1;
      const limit = parseInt(req.query.limit) || 10;
      const offset = (page - 1) * limit;

      const { count, rows: orders } = await Order.findAndCountAll({
        where: { userId },
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product',
                attributes: ['id', 'name', 'images']
              }
            ]
          }
        ],
        order: [['createdAt', 'DESC']],
        limit,
        offset
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const formattedOrders = orders.map(order => ({
        id: order.id,
        orderNumber: order.orderNumber,
        date: order.createdAt,
        status: order.status,
        total: parseFloat(order.totalAmount),
        deliveryAddress: order.deliveryAddress,
        deliveryDate: order.deliveryDate,
        customerPhone: order.customerPhone,
        paymentStatus: order.paymentStatus,
        items: order.items.map(item => ({
          id: item.id,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price),
          totalPrice: parseFloat(item.totalPrice),
          image: item.product?.images?.[0] || item.productImage
        }))
      }));

      res.json({
        success: true,
        data: {
          orders: formattedOrders,
          pagination: {
            currentPage: page,
            totalPages: Math.ceil(count / limit),
            totalItems: count,
            itemsPerPage: limit
          }
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
  async getOrderById(req, res) {
    try {
      const { id } = req.params;
      const userId = req.user.id;

      const order = await Order.findOne({
        where: {
          id,
          userId
        },
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product',
                attributes: ['id', 'name', 'images', 'category']
              }
            ]
          },
          {
            model: User,
            as: 'user',
            attributes: ['firstName', 'lastName', 'email']
          }
        ]
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const formattedOrder = {
        id: order.id,
        orderNumber: order.orderNumber,
        date: order.createdAt,
        status: order.status,
        total: parseFloat(order.totalAmount),
        deliveryAddress: order.deliveryAddress,
        deliveryDate: order.deliveryDate,
        deliveryTime: order.deliveryTime,
        customerPhone: order.customerPhone,
        customerName: order.customerName,
        recipientName: order.recipientName,
        recipientPhone: order.recipientPhone,
        specialInstructions: order.specialInstructions,
        paymentStatus: order.paymentStatus,
        paymentMethod: order.paymentMethod,
        isGift: order.isGift,
        giftMessage: order.giftMessage,
        isAnonymous: order.isAnonymous,
        items: order.items.map(item => ({
          id: item.id,
          productId: item.productId,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price),
          totalPrice: parseFloat(item.totalPrice),
          image: item.product?.images?.[0] || item.productImage,
          category: item.product?.category
        }))
      };

      res.json({
        success: true,
        data: formattedOrder
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  async createOrder(req, res) {
    try {
      // ‚úÖ –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        console.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors.array());
        return res.status(400).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
          errors: errors.array()
        });
      }

      const userId = req.user.id;

      // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('üì• –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', JSON.stringify(req.body, null, 2));
      console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const {
        items,
        deliveryAddress,
        deliveryDate,
        deliveryTime,
        customerPhone,
        customerName,
        recipientName,
        recipientPhone,
        specialInstructions,
        paymentMethod,
        isGift,
        giftMessage,
        isAnonymous
      } = req.body;

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é
      if (!items || !Array.isArray(items) || items.length === 0) {
        return res.status(400).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä'
        });
      }

      if (!deliveryAddress || deliveryAddress.trim().length < 5) {
        return res.status(400).json({
          success: false,
          message: '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
        });
      }

      if (!customerPhone || !customerName) {
        return res.status(400).json({
          success: false,
          message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      let totalAmount = 0;
      const orderItems = [];

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
      for (const item of items) {
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä ID: ${item.productId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}`);

        const product = await Product.findByPk(item.productId);
        if (!product) {
          console.error(`‚ùå –¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return res.status(400).json({
            success: false,
            message: `–¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
          });
        }

        console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${product.name}, –≤ –Ω–∞–ª–∏—á–∏–∏: ${product.inStock}`);

        if (product.inStock < item.quantity) {
          console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ`);
          return res.status(400).json({
            success: false,
            message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ`
          });
        }

        const price = parseFloat(product.discountPrice) || parseFloat(product.price);
        const itemTotal = price * item.quantity;
        totalAmount += itemTotal;

        orderItems.push({
          productId: product.id,
          quantity: item.quantity,
          price: price,
          totalPrice: itemTotal, // ‚úÖ –Ø–≤–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º totalPrice
          productName: product.name,
          productImage: product.images?.[0] || null
        });

        console.log(`üí∞ –¢–æ–≤–∞—Ä: ${product.name}, —Ü–µ–Ω–∞: ${price}, –∏—Ç–æ–≥–æ: ${itemTotal}`);
      }

      console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalAmount}`);

      // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
      let processedDeliveryDate = null;
      if (deliveryDate) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        if (typeof deliveryDate === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(deliveryDate)) {
          processedDeliveryDate = new Date(deliveryDate + 'T00:00:00.000Z');
        } else {
          processedDeliveryDate = new Date(deliveryDate);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
        if (isNaN(processedDeliveryDate.getTime())) {
          return res.status(400).json({
            success: false,
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏'
          });
        }
      }

      console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', processedDeliveryDate);

      // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
      const generateOrderNumber = async (transaction) => {
        const date = new Date();
        const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '');

        let attempts = 0;
        while (attempts < 10) {
          const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
          const orderNumber = `ORD-${dateStr}-${randomNum}`;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
          const existingOrder = await Order.findOne({
            where: { orderNumber },
            transaction
          });

          if (!existingOrder) {
            return orderNumber;
          }
          attempts++;
        }

        // Fallback
        return `ORD-${dateStr}-${Date.now().toString().slice(-6)}`;
      };

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      const result = await sequelize.transaction(async (t) => {
        // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        const orderNumber = await generateOrderNumber(t);
        console.log('üè∑Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', orderNumber);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const orderData = {
          orderNumber, // ‚úÖ –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
          userId,
          totalAmount,
          deliveryAddress: deliveryAddress.trim(),
          deliveryDate: processedDeliveryDate,
          deliveryTime: deliveryTime || null,
          customerPhone: customerPhone.trim(),
          customerName: customerName.trim(),
          recipientName: recipientName ? recipientName.trim() : null,
          recipientPhone: recipientPhone ? recipientPhone.trim() : null,
          specialInstructions: specialInstructions ? specialInstructions.trim() : null,
          paymentMethod: paymentMethod || 'cash',
          isGift: Boolean(isGift),
          giftMessage: giftMessage ? giftMessage.trim() : null,
          isAnonymous: Boolean(isAnonymous)
        };

        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', orderData);

        const order = await Order.create(orderData, { transaction: t });

        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID:', order.id, '–Ω–æ–º–µ—Ä:', order.orderNumber);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for (const itemData of orderItems) {
          console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', itemData);

          // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ totalPrice —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (!itemData.totalPrice) {
            itemData.totalPrice = parseFloat(itemData.price) * itemData.quantity;
            console.log(`üßÆ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω totalPrice: ${itemData.totalPrice}`);
          }

          await OrderItem.create({
            orderId: order.id,
            ...itemData
          }, { transaction: t });

          // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
          await Product.decrement('inStock', {
            by: itemData.quantity,
            where: { id: itemData.productId },
            transaction: t
          });

          console.log(`üìâ –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ID ${itemData.productId} –Ω–∞ ${itemData.quantity}`);
        }

        return order;
      });

      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏
      const createdOrder = await Order.findByPk(result.id, {
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product',
                attributes: ['id', 'name', 'images']
              }
            ]
          }
        ]
      });

      const responseData = {
        id: createdOrder.id,
        orderNumber: createdOrder.orderNumber,
        status: createdOrder.status,
        totalAmount: parseFloat(createdOrder.totalAmount)
      };

      console.log('üì§ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', responseData);

      res.status(201).json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        data: responseData
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      console.error('Stack trace:', error.stack);

      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
  async reorderOrder(req, res) {
    try {
      const { id } = req.params;
      const userId = req.user.id;

      const originalOrder = await Order.findOne({
        where: { id, userId },
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product'
              }
            ]
          }
        ]
      });

      if (!originalOrder) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
      const items = [];
      let totalAmount = 0;

      for (const item of originalOrder.items) {
        if (!item.product || !item.product.isActive) {
          return res.status(400).json({
            success: false,
            message: `–¢–æ–≤–∞—Ä "${item.productName}" –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`
          });
        }

        if (item.product.inStock < item.quantity) {
          return res.status(400).json({
            success: false,
            message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${item.productName}" –Ω–∞ —Å–∫–ª–∞–¥–µ`
          });
        }

        const currentPrice = item.product.discountPrice || item.product.price;
        totalAmount += currentPrice * item.quantity;

        items.push({
          productId: item.productId,
          quantity: item.quantity,
          price: currentPrice,
          totalPrice: currentPrice,
          productName: item.product.name,
          productImage: item.product.images?.[0] || null
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const generateOrderNumber = () => {
        const timestamp = Date.now().toString();
        const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        return `ORD-${timestamp.slice(-8)}-${random}`;
      };

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
      const newOrder = await sequelize.transaction(async (t) => {
        const order = await Order.create({
          userId,
          orderNumber: generateOrderNumber(), // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
          totalAmount,
          deliveryAddress: originalOrder.deliveryAddress,
          customerPhone: originalOrder.customerPhone,
          customerName: originalOrder.customerName,
          status: 'pending'
        }, { transaction: t });

        for (const itemData of items) {
          await OrderItem.create({
            orderId: order.id,
            ...itemData
          }, { transaction: t });
        }

        return order;
      });

      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω',
        data: {
          id: newOrder.id,
          orderNumber: newOrder.orderNumber
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  async cancelOrder(req, res) {
    try {
      const { id } = req.params;
      const userId = req.user.id;

      const order = await Order.findOne({
        where: { id, userId },
        include: [{ model: OrderItem, as: 'items' }]
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (['delivered', 'cancelled'].includes(order.status)) {
        return res.status(400).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å'
        });
      }

      // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
      await sequelize.transaction(async (t) => {
        await order.update({ status: 'cancelled' }, { transaction: t });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        for (const item of order.items) {
          await Product.increment('inStock', {
            by: item.quantity,
            where: { id: item.productId },
            transaction: t
          });
        }
      });

      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  // ============ –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ ============

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async getAllOrders(req, res) {
    try {
      const page = parseInt(req.query.page) || 1;
      const limit = parseInt(req.query.limit) || 50;
      const offset = (page - 1) * limit;
      const status = req.query.status;
      const search = req.query.search;

      // –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
      const whereConditions = {};
      if (status) {
        whereConditions.status = status;
      }

      if (search) {
        whereConditions[Op.or] = [
          { orderNumber: { [Op.iLike]: `%${search}%` } },
          { customerName: { [Op.iLike]: `%${search}%` } },
          { customerPhone: { [Op.iLike]: `%${search}%` } }
        ];
      }

      const { count, rows: orders } = await Order.findAndCountAll({
        where: whereConditions,
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product',
                attributes: ['id', 'name', 'images', 'category']
              }
            ]
          },
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'email']
          }
        ],
        order: [['createdAt', 'DESC']],
        limit,
        offset
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
      const totalSum = await Order.sum('totalAmount', {
        where: whereConditions
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
      const formattedOrders = orders.map(order => ({
        id: order.id,
        orderNumber: order.orderNumber,
        date: order.createdAt,
        status: order.status,
        total: parseFloat(order.totalAmount),
        deliveryAddress: order.deliveryAddress,
        deliveryDate: order.deliveryDate,
        deliveryTime: order.deliveryTime,
        customerPhone: order.customerPhone,
        customerName: order.customerName,
        recipientName: order.recipientName,
        recipientPhone: order.recipientPhone,
        specialInstructions: order.specialInstructions,
        paymentStatus: order.paymentStatus,
        paymentMethod: order.paymentMethod,
        isGift: order.isGift,
        giftMessage: order.giftMessage,
        isAnonymous: order.isAnonymous,
        user: order.user ? {
          id: order.user.id,
          name: `${order.user.firstName || ''} ${order.user.lastName || ''}`.trim(),
          email: order.user.email
        } : null,
        items: order.items.map(item => ({
          id: item.id,
          productId: item.productId,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price),
          totalPrice: parseFloat(item.totalPrice),
          image: item.product?.images?.[0] || item.productImage,
          category: item.product?.category
        }))
      }));

      res.json({
        success: true,
        data: {
          orders: formattedOrders,
          total: totalSum || 0,
          pagination: {
            currentPage: page,
            totalPages: Math.ceil(count / limit),
            totalItems: count,
            itemsPerPage: limit
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω):', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤
  async getOrdersTotalSum(req, res) {
    try {
      const startDate = req.query.startDate;
      const endDate = req.query.endDate;
      const status = req.query.status;

      const whereConditions = {};

      if (startDate && endDate) {
        whereConditions.createdAt = {
          [Op.between]: [new Date(startDate), new Date(endDate)]
        };
      }

      if (status) {
        whereConditions.status = status;
      }

      const totalSum = await Order.sum('totalAmount', {
        where: whereConditions
      });

      const ordersCount = await Order.count({
        where: whereConditions
      });

      res.json({
        success: true,
        data: {
          totalSum: totalSum || 0,
          ordersCount: ordersCount || 0,
          averageOrderValue: ordersCount > 0 ? (totalSum || 0) / ordersCount : 0
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  async getOrdersStatistics(req, res) {
    try {
      const today = new Date();
      const startOfToday = new Date(today.setHours(0, 0, 0, 0));
      const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusStats = await Order.findAll({
        attributes: [
          'status',
          [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
          [sequelize.fn('SUM', sequelize.col('totalAmount')), 'sum']
        ],
        group: ['status'],
        raw: true
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayStats = await Order.findOne({
        attributes: [
          [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
          [sequelize.fn('SUM', sequelize.col('totalAmount')), 'sum']
        ],
        where: {
          createdAt: {
            [Op.gte]: startOfToday
          }
        },
        raw: true
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
      const weekStats = await Order.findOne({
        attributes: [
          [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
          [sequelize.fn('SUM', sequelize.col('totalAmount')), 'sum']
        ],
        where: {
          createdAt: {
            [Op.gte]: startOfWeek
          }
        },
        raw: true
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
      const monthStats = await Order.findOne({
        attributes: [
          [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
          [sequelize.fn('SUM', sequelize.col('totalAmount')), 'sum']
        ],
        where: {
          createdAt: {
            [Op.gte]: startOfMonth
          }
        },
        raw: true
      });

      res.json({
        success: true,
        data: {
          statusStats: statusStats.map(stat => ({
            status: stat.status,
            count: parseInt(stat.count) || 0,
            sum: parseFloat(stat.sum) || 0
          })),
          todayStats: {
            count: parseInt(todayStats?.count) || 0,
            sum: parseFloat(todayStats?.sum) || 0
          },
          weekStats: {
            count: parseInt(weekStats?.count) || 0,
            sum: parseFloat(weekStats?.sum) || 0
          },
          monthStats: {
            count: parseInt(monthStats?.count) || 0,
            sum: parseFloat(monthStats?.sum) || 0
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  async getOrdersSumByPeriod(req, res) {
    try {
      const period = req.query.period || 'month'; // day, week, month, year
      const limit = parseInt(req.query.limit) || 12;

      let dateFormat;
      let dateFunction;

      switch (period) {
        case 'day':
          dateFormat = '%Y-%m-%d';
          dateFunction = sequelize.fn('DATE', sequelize.col('createdAt'));
          break;
        case 'week':
          dateFormat = '%Y-%u';
          dateFunction = sequelize.fn('YEARWEEK', sequelize.col('createdAt'));
          break;
        case 'month':
          dateFormat = '%Y-%m';
          dateFunction = sequelize.fn('DATE_FORMAT', sequelize.col('createdAt'), '%Y-%m');
          break;
        case 'year':
          dateFormat = '%Y';
          dateFunction = sequelize.fn('YEAR', sequelize.col('createdAt'));
          break;
        default:
          dateFormat = '%Y-%m';
          dateFunction = sequelize.fn('DATE_FORMAT', sequelize.col('createdAt'), '%Y-%m');
      }

      const results = await Order.findAll({
        attributes: [
          [dateFunction, 'period'],
          [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
          [sequelize.fn('SUM', sequelize.col('totalAmount')), 'sum']
        ],
        group: [sequelize.fn('DATE_FORMAT', sequelize.col('createdAt'), dateFormat)],
        order: [[sequelize.fn('DATE_FORMAT', sequelize.col('createdAt'), dateFormat), 'DESC']],
        limit,
        raw: true
      });

      const formattedResults = results.map(result => ({
        period: result.period,
        count: parseInt(result.count) || 0,
        sum: parseFloat(result.sum) || 0
      }));

      res.json({
        success: true,
        data: formattedResults
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
      });
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async updateOrderStatus(req, res) {
    try {
      const { id } = req.params;
      const { status } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
      const validStatuses = ['pending', 'processing', 'confirmed', 'delivering', 'delivered', 'cancelled'];
      if (!validStatuses.includes(status)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
        });
      }

      const order = await Order.findByPk(id, {
        include: [{ model: OrderItem, as: 'items' }]
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
      if (status === 'cancelled' && order.status !== 'cancelled') {
        await sequelize.transaction(async (t) => {
          await order.update({ status }, { transaction: t });

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
          for (const item of order.items) {
            await Product.increment('inStock', {
              by: item.quantity,
              where: { id: item.productId },
              transaction: t
            });
          }
        });
      } else {
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await order.update({ status });
      }

      res.json({
        success: true,
        message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
        data: {
          id: order.id,
          status: order.status,
          orderNumber: order.orderNumber
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async getAdminOrderById(req, res) {
    try {
      const { id } = req.params;

      const order = await Order.findByPk(id, {
        include: [
          {
            model: OrderItem,
            as: 'items',
            include: [
              {
                model: Product,
                as: 'product',
                attributes: ['id', 'name', 'images', 'category', 'price', 'discountPrice']
              }
            ]
          },
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'email', 'phone']
          }
        ]
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
      const formattedOrder = {
        id: order.id,
        orderNumber: order.orderNumber,
        date: order.createdAt,
        status: order.status,
        total: parseFloat(order.totalAmount),
        deliveryAddress: order.deliveryAddress,
        deliveryDate: order.deliveryDate,
        deliveryTime: order.deliveryTime,
        customerPhone: order.customerPhone,
        customerName: order.customerName,
        recipientName: order.recipientName,
        recipientPhone: order.recipientPhone,
        specialInstructions: order.specialInstructions,
        paymentStatus: order.paymentStatus,
        paymentMethod: order.paymentMethod,
        isGift: order.isGift,
        giftMessage: order.giftMessage,
        isAnonymous: order.isAnonymous,
        user: order.user ? {
          id: order.user.id,
          name: `${order.user.firstName || ''} ${order.user.lastName || ''}`.trim(),
          email: order.user.email,
          phone: order.user.phone
        } : null,
        items: order.items.map(item => ({
          id: item.id,
          productId: item.productId,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price),
          totalPrice: parseFloat(item.totalPrice),
          image: item.product?.images?.[0] || item.productImage,
          category: item.product?.category,
          product: item.product ? {
            id: item.product.id,
            name: item.product.name,
            currentPrice: parseFloat(item.product.discountPrice || item.product.price),
            images: item.product.images
          } : null
        }))
      };

      res.json({
        success: true,
        data: formattedOrder
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω):', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      });
    }
  }
}

module.exports = new OrderController();