const { User, Order } = require("../models");
const { Op } = require('sequelize');

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
exports.usersFindAll = async (req, res) => {
  try {
    const response = await User.findAll({
      attributes: {
        exclude: ['password'] // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
      },
      include: [{
        model: Order,
        as: 'orders', // –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        attributes: ['id', 'totalAmount', 'status', 'createdAt'],
        required: false
      }]
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersWithStats = response.map(user => {
      const userData = user.toJSON();
      const orders = userData.orders || [];
      
      userData.statistics = {
        totalOrders: orders.length,
        totalSpent: orders.reduce((sum, order) => sum + parseFloat(order.totalAmount || 0), 0),
        completedOrders: orders.filter(order => order.status === 'delivered').length,
        lastOrderDate: orders.length > 0 ? Math.max(...orders.map(o => new Date(o.createdAt))) : null
      };
      
      return userData;
    });

    res.status(200).json({ 
      users: usersWithStats,
      total: usersWithStats.length 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(400).json({ message: error.message });
  }
};

// üèÜ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
exports.getTopBuyers = async (req, res) => {
  try {
    const { limit = 10, period = 'all' } = req.query;
    
    let dateFilter = {};
    if (period !== 'all') {
      const now = new Date();
      switch (period) {
        case 'month':
          dateFilter.createdAt = {
            [Op.gte]: new Date(now.getFullYear(), now.getMonth(), 1)
          };
          break;
        case 'year':
          dateFilter.createdAt = {
            [Op.gte]: new Date(now.getFullYear(), 0, 1)
          };
          break;
        case '30days':
          dateFilter.createdAt = {
            [Op.gte]: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
          };
          break;
      }
    }

    const topBuyers = await User.findAll({
      attributes: [
        'id', 'firstName', 'lastName', 'email', 'phone', 'createdAt'
      ],
      include: [{
        model: Order,
        as: 'orders',
        where: {
          status: { [Op.in]: ['delivered', 'confirmed'] },
          ...dateFilter
        },
        attributes: ['totalAmount', 'status', 'createdAt'],
        required: true
      }],
      order: [[{ model: Order, as: 'orders' }, 'totalAmount', 'DESC']]
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫
    const buyersStats = topBuyers.reduce((acc, user) => {
      const userData = user.toJSON();
      const userId = userData.id;
      
      if (!acc[userId]) {
        acc[userId] = {
          ...userData,
          totalSpent: 0,
          totalOrders: 0,
          avgOrderValue: 0,
          orders: []
        };
        delete acc[userId].orders;
      }
      
      userData.orders.forEach(order => {
        acc[userId].totalSpent += parseFloat(order.totalAmount);
        acc[userId].totalOrders += 1;
        acc[userId].orders = userData.orders;
      });
      
      acc[userId].avgOrderValue = acc[userId].totalSpent / acc[userId].totalOrders;
      
      return acc;
    }, {});

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    const sortedBuyers = Object.values(buyersStats)
      .sort((a, b) => b.totalSpent - a.totalSpent)
      .slice(0, parseInt(limit));

    res.status(200).json({
      topBuyers: sortedBuyers,
      period,
      total: sortedBuyers.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:', error);
    res.status(400).json({ message: error.message });
  }
};

// üë§ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
exports.getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    
    const user = await User.findByPk(id, {
      attributes: { exclude: ['password'] },
      include: [{
        model: Order,
        as: 'orders',
        attributes: ['id', 'orderNumber', 'totalAmount', 'status', 'createdAt', 'deliveryDate']
      }]
    });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.toJSON();
    const orders = userData.orders || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    userData.statistics = {
      totalOrders: orders.length,
      totalSpent: orders.reduce((sum, order) => sum + parseFloat(order.totalAmount || 0), 0),
      completedOrders: orders.filter(order => order.status === 'delivered').length,
      pendingOrders: orders.filter(order => order.status === 'pending').length,
      processingOrders: orders.filter(order => order.status === 'processing').length,
      cancelledOrders: orders.filter(order => order.status === 'cancelled').length,
      avgOrderValue: orders.length > 0 ? orders.reduce((sum, order) => sum + parseFloat(order.totalAmount || 0), 0) / orders.length : 0,
      firstOrderDate: orders.length > 0 ? Math.min(...orders.map(o => new Date(o.createdAt))) : null,
      lastOrderDate: orders.length > 0 ? Math.max(...orders.map(o => new Date(o.createdAt))) : null
    };

    res.status(200).json({ user: userData });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(400).json({ message: error.message });
  }
};

// ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.createUser = async (req, res) => {
  try {
    const { firstName, lastName, email, phone, password, role, address } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ 
        message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: firstName, lastName, email, password' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const newUser = await User.create({
      firstName,
      lastName,
      email,
      phone,
      password,
      role: role || 'user',
      address
    });

    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const userResponse = { ...newUser.toJSON() };
    delete userResponse.password;

    res.status(201).json({ 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      user: userResponse 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(400).json({ message: error.message });
  }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { firstName, lastName, email, phone, password, role, address, isActive } = req.body;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è email, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (email && email !== user.email) {
      const existingUser = await User.findOne({ 
        where: { 
          email,
          id: { [Op.ne]: id } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } 
      });
      if (existingUser) {
        return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
    if (phone && phone !== '' && phone !== user.phone) {
      const existingUser = await User.findOne({ 
        where: { 
          phone,
          id: { [Op.ne]: id }
        } 
      });
      if (existingUser) {
        return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
    }

    // ‚úÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const updateData = {};
    if (firstName !== undefined) updateData.firstName = firstName;
    if (lastName !== undefined) updateData.lastName = lastName;
    if (email !== undefined) updateData.email = email;
    if (password !== undefined) updateData.password = password; // –•—É–∫ beforeUpdate –∑–∞—à–∏—Ñ—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å
    if (role !== undefined) updateData.role = role;
    if (address !== undefined) updateData.address = address;
    if (isActive !== undefined) updateData.isActive = isActive;
    
    // ‚úÖ –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ null
    if (phone !== undefined) {
      updateData.phone = phone === '' ? null : phone;
    }

    await user.update(updateData);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const updatedUser = await User.findByPk(id, {
      attributes: { exclude: ['password'] }
    });

    res.status(200).json({ 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: updatedUser 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (error.name === 'SequelizeValidationError') {
      const validationErrors = error.errors.map(err => ({
        field: err.path,
        message: err.message
      }));
      
      return res.status(400).json({ 
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: validationErrors
      });
    }
    
    res.status(400).json({ message: error.message });
  }
};

// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const activeOrders = await Order.findAll({
      where: {
        userId: id,
        status: { [Op.in]: ['pending', 'processing', 'confirmed', 'delivering'] }
      }
    });

    if (activeOrders.length > 0) {
      return res.status(400).json({ 
        message: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ (${activeOrders.length})`,
        activeOrdersCount: activeOrders.length
      });
    }

    await user.destroy();

    res.status(200).json({ 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      deletedUserId: id
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(400).json({ message: error.message });
  }
};

// üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
exports.getUsersStatistics = async (req, res) => {
  try {
    const totalUsers = await User.count();
    const activeUsers = await User.count({ where: { isActive: true } });
    const adminUsers = await User.count({ where: { role: 'admin' } });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
    const usersWithOrders = await User.count({
      include: [{
        model: Order,
        as: 'orders',
        required: true
      }]
    });

    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    const newUsersLastMonth = await User.count({
      where: {
        createdAt: { [Op.gte]: lastMonth }
      }
    });

    res.status(200).json({
      statistics: {
        totalUsers,
        activeUsers,
        inactiveUsers: totalUsers - activeUsers,
        adminUsers,
        regularUsers: totalUsers - adminUsers,
        usersWithOrders,
        usersWithoutOrders: totalUsers - usersWithOrders,
        newUsersLastMonth
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(400).json({ message: error.message });
  }
};

// üë§ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è)
exports.getCurrentUser = async (req, res) => {
  try {
    const userId = req.user.id; // –ò–∑ middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    const user = await User.findByPk(userId, {
      attributes: { exclude: ['password'] },
      include: [{
        model: Order,
        as: 'orders',
        attributes: ['id', 'orderNumber', 'totalAmount', 'status', 'createdAt']
      }]
    });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.toJSON();
    const orders = userData.orders || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    userData.statistics = {
      totalOrders: orders.length,
      totalSpent: orders.reduce((sum, order) => sum + parseFloat(order.totalAmount || 0), 0),
      completedOrders: orders.filter(order => order.status === 'delivered').length,
      pendingOrders: orders.filter(order => order.status === 'pending').length,
      processingOrders: orders.filter(order => order.status === 'processing').length,
      cancelledOrders: orders.filter(order => order.status === 'cancelled').length,
      avgOrderValue: orders.length > 0 ? orders.reduce((sum, order) => sum + parseFloat(order.totalAmount || 0), 0) / orders.length : 0,
      firstOrderDate: orders.length > 0 ? Math.min(...orders.map(o => new Date(o.createdAt))) : null,
      lastOrderDate: orders.length > 0 ? Math.max(...orders.map(o => new Date(o.createdAt))) : null
    };

    res.status(200).json({ 
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      user: userData 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};