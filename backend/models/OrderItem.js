const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');

const OrderItem = sequelize.define('OrderItem', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Orders',
      key: 'id'
    }
  },
  productId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Products',
      key: 'id'
    }
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1,
    validate: {
      min: 1
    }
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    validate: {
      min: 0
    }
  },
  totalPrice: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    validate: {
      min: 0
    }
  },
  productName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  productImage: {
    type: DataTypes.STRING,
    allowNull: true
  }
}, {
  hooks: {
    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ö—É–∫–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ beforeCreate, —Ç–∞–∫ –∏ beforeUpdate
    beforeCreate: (orderItem, options) => {
      console.log('üßÆ –†–∞—Å—á–µ—Ç totalPrice –¥–ª—è –Ω–æ–≤–æ–≥–æ OrderItem...');
      if (orderItem.price && orderItem.quantity) {
        orderItem.totalPrice = parseFloat(orderItem.price) * orderItem.quantity;
        console.log(`üí∞ totalPrice: ${orderItem.price} √ó ${orderItem.quantity} = ${orderItem.totalPrice}`);
      }
    },
    
    beforeUpdate: (orderItem, options) => {
      console.log('üßÆ –ü–µ—Ä–µ—Å—á–µ—Ç totalPrice –¥–ª—è OrderItem...');
      if (orderItem.price && orderItem.quantity) {
        orderItem.totalPrice = parseFloat(orderItem.price) * orderItem.quantity;
        console.log(`üí∞ –Ω–æ–≤—ã–π totalPrice: ${orderItem.price} √ó ${orderItem.quantity} = ${orderItem.totalPrice}`);
      }
    },
    
    beforeSave: (orderItem, options) => {
      console.log('üßÆ beforeSave: –ø—Ä–æ–≤–µ—Ä–∫–∞ totalPrice...');
      // –ï—Å–ª–∏ totalPrice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
      if (!orderItem.totalPrice && orderItem.price && orderItem.quantity) {
        orderItem.totalPrice = parseFloat(orderItem.price) * orderItem.quantity;
        console.log(`üí∞ beforeSave totalPrice: ${orderItem.price} √ó ${orderItem.quantity} = ${orderItem.totalPrice}`);
      }
    }
  }
});

module.exports = OrderItem;